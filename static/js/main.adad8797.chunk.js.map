{"version":3,"sources":["Squer/Squer.module.css","Board/Board.module.css","Squer/Squer.js","Board/Board.js","services/Board.js","services/Game.js","services/Cell.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Squer","alive","conf","clickListener","styleClasses","Style","push","Alive","join","className","Board","board","setSelect","selectBox","map","row","indexY","key","Row","cell","indexX","onClick","onMouseDown","onMouseUp","onMouseEnter","Cell","this","maxY","length","maxX","setBoard","rowIndex","item","columnIndex","getSiblingsPosition","cellX","cellY","forEach","addSiblings","minX","minY","arraySiblings","getMinMax","max","x","y","Game","snapShots","getSnapShots","number","snap","livesCounter","checkLifeOrDeth","siblingsPositions","aliveSiblings","sibligs","boardOfCells","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","fn","emptyBoard","width","heigth","Array","startBoard","App","useState","demention","step","setStep","setSnapShots","select","isRunning","setRunning","setDelay","isBoardChange","setBoardChange","game","useMemo","boardClass","BoardClass","nextStep","next","concat","setIntervalCallback","stop","boardConfig","boardTemp","type","value","min","onChange","e","Number","target","disabled","newSnapShots","slice","setNewShots","resetBoard","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.adad8797.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Squer\":\"Squer_Squer__3M-ZX\",\"Alive\":\"Squer_Alive__36B1v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"Board_Row__2Ov0-\"};","import React from \"react\";\nimport Style from \"./Squer.module.css\";\n\nconst Squer = ({ alive = false, clickListener, ...conf }) => {\n  let styleClasses = [Style.Squer];\n  if (alive) styleClasses.push(Style.Alive);\n  styleClasses = styleClasses.join(\" \");\n\n  return <div className={styleClasses} {...conf}></div>;\n};\n\nexport default Squer;\n","import React from \"react\";\nimport Style from \"./Board.module.css\";\nimport Squer from \"../Squer/Squer\";\n\nconst Board = ({ board, clickListener, setSelect, selectBox }) => {\n  let gameBoard = board.map((row, indexY) => (\n    <div key={\"\" + indexY} className={Style.Row}>\n      {row.map((cell, indexX) => {\n        return (\n          <Squer\n            key={indexY + \"\" + indexX}\n            alive={cell}\n            onClick={() => clickListener(indexX, indexY)}\n            onMouseDown={() => setSelect(true)}\n            onMouseUp={() => setSelect(false)}\n            onMouseEnter={() => selectBox(indexX, indexY)}\n          />\n        );\n      })}\n    </div>\n  ));\n  return gameBoard;\n};\n\nexport default Board;\n","class Board {\n  constructor(board, Cell) {\n    this.Cell = Cell;\n    this.maxY = board.length - 1;\n    this.maxX = board[0].length - 1;\n    this.board = this.setBoard(board);\n  }\n  setBoard(board) {\n    //setup of siblings positions array\n    board = board.map((row, rowIndex) =>\n      row.map(\n        (item, columnIndex) =>\n          new this.Cell(\n            item,\n            this.getSiblingsPosition(\n              { cellX: columnIndex, cellY: rowIndex },\n              { maxX: this.maxX, maxY: this.maxY }\n            )\n          )\n      )\n    );\n    //setup cells sibling in cell.sibling array\n    board.forEach((row) => row.forEach((cell) => cell.addSiblings(board)));\n    this.board = board;\n    return board;\n  }\n  getSiblingsPosition({ cellX, cellY }, { maxX, maxY }) {\n    let arraySiblings = [];\n    let minX = 0;\n    let minY = 0;\n    const getMinMax = (item, max) => [\n      item === 0 ? 0 : item - 1,\n      item === max ? max : item + 1,\n    ];\n\n    [minX, maxX] = getMinMax(cellX, maxX);\n    [minY, maxY] = getMinMax(cellY, maxY);\n\n    for (let x = minX; x <= maxX; x++) {\n      for (let y = minY; y <= maxY; y++) {\n        if (x === cellX && y === cellY) {\n          continue;\n        }\n        arraySiblings.push({ x, y });\n      }\n    }\n    return arraySiblings;\n  }\n}\n\nexport default Board;\n","class Game {\n  constructor(board) {\n    this.board = board;\n    this.snapShots = this.getSnapShots();\n  }\n  getSnapShots(board = null, number = 100) {\n    //jezeli dostane tablice [[true,false,...], [false,true,...], ...]\n    if (!!board) {\n      board.forEach((row, indexY) =>\n        row.forEach((item, indexX) => (this.board[indexY][indexX].alive = item))\n      );\n    }\n    let snap = () => this.board.map((row) => row.map((item) => item.alive));\n    let snapShots = [snap()];\n\n    while (number-- > 0) {\n      this.board.forEach((row) => row.forEach((item) => item.livesCounter()));\n\n      this.board.forEach((row) =>\n        row.forEach((item) => item.checkLifeOrDeth())\n      );\n\n      snapShots.push(snap());\n    }\n    this.snapShots = snapShots;\n    return snapShots;\n  }\n}\n\nexport default Game;\n","class Cell {\n  constructor(alive, siblingsPositions) {\n    this.alive = alive;\n    this.siblingsPositions = siblingsPositions;\n    this.aliveSiblings = 0;\n    this.sibligs = [];\n  }\n\n  addSiblings(boardOfCells) {\n    this.siblingsPositions.forEach(({ x, y }) =>\n      this.sibligs.push(boardOfCells[y][x])\n    );\n  }\n  livesCounter() {\n    this.aliveSiblings = 0;\n    this.sibligs.forEach((cell) => {\n      if (cell.alive) ++this.aliveSiblings;\n    });\n  }\n  checkLifeOrDeth() {\n    if (this.alive) {\n      if (this.aliveSiblings < 2 || this.aliveSiblings > 3) {\n        this.alive = false;\n      }\n    } else {\n      if (this.aliveSiblings === 3) {\n        this.alive = true;\n      }\n    }\n  }\n}\n\nexport default Cell;\n","import { useEffect, useRef } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  const setCallback = (fn) => {\n    callback = fn;\n  };\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  return setCallback;\n}\n\nexport default useInterval;\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board/Board\";\nimport BoardClass from \"./services/Board\";\nimport Game from \"./services/Game\";\nimport Cell from \"./services/Cell\";\nimport useInterval from \"./hooks/useInterval\";\n\nlet [width, heigth] = [40, 40];\nconst emptyBoard = (width, heigth) =>\n  [...new Array(heigth)].map(() => [...new Array(width)].map(() => false));\nconst startBoard = emptyBoard(width, heigth);\n\nfunction App() {\n  const [demention, setDemention] = useState({ width: 40, heigth: 40 });\n  const [step, setStep] = useState(0);\n  const [snapShots, setSnapShots] = useState([[]]);\n  const [board, setBoard] = useState(\n    emptyBoard(demention.width, demention.heigth)\n  );\n  const [select, setSelect] = useState(false);\n  const [isRunning, setRunning] = useState(null);\n  const [delay, setDelay] = useState(300);\n  const [isBoardChange, setBoardChange] = useState(false);\n\n  let game = useMemo(() => {\n    const boardClass = new BoardClass(startBoard, Cell);\n    return new Game(boardClass.board);\n  });\n\n  useEffect(() => {\n    setBoard(emptyBoard(demention.width, demention.heigth));\n  }, [demention.width, demention.heigth]);\n\n  const selectBox = (x, y) => {\n    if (select) {\n      const boardTemp = [...board];\n      stop();\n      boardTemp[y][x] = !boardTemp[y][x];\n      setBoard(boardTemp);\n      setBoardChange(true);\n    }\n  };\n\n  const clickListener = (x, y) => {\n    stop();\n    const boardTemp = [...board];\n    boardTemp[y][x] = !boardTemp[y][x];\n    setBoard(boardTemp);\n    setBoardChange(true);\n  };\n\n  const setNewShots = (board = null) => {\n    if (board) {\n      let newSnapShots = game.getSnapShots(board);\n      setSnapShots(snapShots.slice(0, step).concat(newSnapShots));\n    }\n  };\n\n  const nextStep = (next = null) => {\n    next = next ?? step + 1;\n\n    if (next > snapShots.length - 10) {\n      setSnapShots(\n        snapShots.concat(game.getSnapShots(snapShots[snapShots.length - 1]))\n      );\n    }\n\n    if (snapShots.length > 0) {\n      setBoard(snapShots[next]);\n    }\n\n    setStep(next);\n  };\n\n  const previous = () => {\n    let previousStep = step <= 0 ? 0 : step - 1;\n    setStep(previousStep);\n    setBoard(snapShots[previousStep]);\n  };\n\n  const setIntervalCallback = useInterval(nextStep, isRunning ? delay : null);\n\n  const start = () => {\n    if (isBoardChange) {\n      setBoardChange(false);\n      setNewShots(board);\n    }\n\n    setIntervalCallback(nextStep);\n    setRunning(true);\n  };\n\n  const stop = () => {\n    setRunning(null);\n  };\n\n  const rangeSliderHandler = (e) => {\n    stop();\n    nextStep(Number(e.target.value));\n  };\n\n  const boardConfig = { board, clickListener, setSelect, selectBox };\n\n  const faster = () => {\n    setDelay(delay - delay / 2);\n  };\n\n  const slower = () => {\n    setDelay(delay * 2);\n  };\n\n  const reset = () => {\n    stop();\n    const resetBoard = emptyBoard(width, heigth);\n    setBoard(resetBoard);\n    setSnapShots(resetBoard);\n    setStep(0);\n    setBoardChange(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Board {...boardConfig} />\n      </div>\n      <div>\n        <input\n          type=\"range\"\n          value={step}\n          min=\"0\"\n          max={snapShots.length - 1}\n          onChange={rangeSliderHandler}\n          disabled={isRunning}\n        />\n        <p>Step: {step}</p>\n\n        <button onClick={start}>Start</button>\n        <button onClick={stop}>Stop</button>\n        <button onClick={reset}>Reset</button>\n        <p>Refresh in {(delay / 1000).toFixed(2)}s</p>\n        <button onClick={faster}>Faster</button>\n        <button onClick={slower}>Slower</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}